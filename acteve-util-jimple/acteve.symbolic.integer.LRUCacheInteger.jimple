class acteve.symbolic.integer.LRUCacheInteger extends java.util.LinkedHashMap
{
    private final int MAX_SIZE;
    private final acteve.symbolic.integer.IntegerConstant ONE;
    private final acteve.symbolic.integer.IntegerConstant ZERO;

    void <init>()
    {
        acteve.symbolic.integer.LRUCacheInteger $r0;
        acteve.symbolic.integer.IntegerConstant $r1;

        $r0 := @this: acteve.symbolic.integer.LRUCacheInteger;
        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();
        $r0.<acteve.symbolic.integer.LRUCacheInteger: int MAX_SIZE> = 50;
        $r1 = new acteve.symbolic.integer.IntegerConstant;
        specialinvoke $r1.<acteve.symbolic.integer.IntegerConstant: void <init>(int)>(0);
        $r0.<acteve.symbolic.integer.LRUCacheInteger: acteve.symbolic.integer.IntegerConstant ZERO> = $r1;
        $r1 = new acteve.symbolic.integer.IntegerConstant;
        specialinvoke $r1.<acteve.symbolic.integer.IntegerConstant: void <init>(int)>(1);
        $r0.<acteve.symbolic.integer.LRUCacheInteger: acteve.symbolic.integer.IntegerConstant ONE> = $r1;
        return;
    }

    public acteve.symbolic.integer.IntegerConstant get(int)
    {
        acteve.symbolic.integer.LRUCacheInteger $r0;
        int $i0;
        acteve.symbolic.integer.IntegerConstant $r1;
        java.lang.Integer $r2;

        $r0 := @this: acteve.symbolic.integer.LRUCacheInteger;
        $i0 := @parameter0: int;
        if $i0 != 0 goto label0;

        $r1 = $r0.<acteve.symbolic.integer.LRUCacheInteger: acteve.symbolic.integer.IntegerConstant ZERO>;
        return $r1;

     label0:
        if $i0 != 1 goto label1;

        $r1 = $r0.<acteve.symbolic.integer.LRUCacheInteger: acteve.symbolic.integer.IntegerConstant ONE>;
        return $r1;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        $r1 = virtualinvoke $r0.<acteve.symbolic.integer.LRUCacheInteger: acteve.symbolic.integer.IntegerConstant get(java.lang.Integer)>($r2);
        return $r1;
    }

    public acteve.symbolic.integer.IntegerConstant get(java.lang.Integer)
    {
        acteve.symbolic.integer.LRUCacheInteger $r0;
        java.lang.Integer $r1;
        java.lang.Object $r2;
        int $i0;
        acteve.symbolic.integer.IntegerConstant $r3;

        $r0 := @this: acteve.symbolic.integer.LRUCacheInteger;
        $r1 := @parameter0: java.lang.Integer;
        $r2 = specialinvoke $r0.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r1);
        $r3 = (acteve.symbolic.integer.IntegerConstant) $r2;
        if $r3 != null goto label0;

        $r3 = new acteve.symbolic.integer.IntegerConstant;
        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();
        specialinvoke $r3.<acteve.symbolic.integer.IntegerConstant: void <init>(int)>($i0);
        virtualinvoke $r0.<acteve.symbolic.integer.LRUCacheInteger: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

     label0:
        return $r3;
    }

    protected boolean removeEldestEntry(java.util.Map$Entry)
    {
        acteve.symbolic.integer.LRUCacheInteger $r0;
        java.util.Map$Entry $r1;
        int $i0;

        $r0 := @this: acteve.symbolic.integer.LRUCacheInteger;
        $r1 := @parameter0: java.util.Map$Entry;
        $i0 = virtualinvoke $r0.<acteve.symbolic.integer.LRUCacheInteger: int size()>();
        if $i0 <= 50 goto label0;

        return 1;

     label0:
        return 0;
    }
}
