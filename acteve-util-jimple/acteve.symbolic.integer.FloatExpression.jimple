public abstract class acteve.symbolic.integer.FloatExpression extends acteve.symbolic.integer.Expression implements acteve.symbolic.integer.CMP, acteve.symbolic.integer.Algebraic
{
    public static final acteve.symbolic.integer.UnaryOperator F2D;
    public static final acteve.symbolic.integer.UnaryOperator F2I;
    public static final acteve.symbolic.integer.UnaryOperator F2L;
    public static final acteve.symbolic.integer.BinaryOperator FADD;
    public static final acteve.symbolic.integer.BinaryOperator FCMPG;
    public static final acteve.symbolic.integer.BinaryOperator FCMPL;
    public static final acteve.symbolic.integer.BinaryOperator FDIV;
    public static final acteve.symbolic.integer.BinaryOperator FMUL;
    public static final acteve.symbolic.integer.UnaryOperator FNEG;
    public static final acteve.symbolic.integer.BinaryOperator FREM;
    public static final acteve.symbolic.integer.BinaryOperator FSUB;
    public static final acteve.symbolic.integer.BinaryOperator REQ;
    public static final acteve.symbolic.integer.BinaryOperator RNE;
    public float seed;

    static void <clinit>()
    {
        acteve.symbolic.integer.operation.Operations $r0;
        acteve.symbolic.integer.BinaryOperator $r1;
        acteve.symbolic.integer.UnaryOperator $r2;

        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r1 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.BinaryOperator fadd()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FADD> = $r1;
        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r1 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.BinaryOperator fsub()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FSUB> = $r1;
        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r1 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.BinaryOperator fmul()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FMUL> = $r1;
        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r1 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.BinaryOperator fdiv()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FDIV> = $r1;
        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r1 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.BinaryOperator frem()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FREM> = $r1;
        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r1 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.BinaryOperator fcmpl()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FCMPL> = $r1;
        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r1 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.BinaryOperator fcmpg()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FCMPG> = $r1;
        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r2 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.UnaryOperator fneg()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.UnaryOperator FNEG> = $r2;
        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r2 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.UnaryOperator f2i()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.UnaryOperator F2I> = $r2;
        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r2 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.UnaryOperator f2l()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.UnaryOperator F2L> = $r2;
        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r2 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.UnaryOperator f2d()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.UnaryOperator F2D> = $r2;
        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r1 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.BinaryOperator req()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator REQ> = $r1;
        $r0 = <acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.operation.Operations v>;
        $r1 = virtualinvoke $r0.<acteve.symbolic.integer.operation.Operations: acteve.symbolic.integer.BinaryOperator rne()>();
        <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator RNE> = $r1;
        return;
    }

    public void <init>()
    {
        acteve.symbolic.integer.FloatExpression $r0;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        specialinvoke $r0.<acteve.symbolic.integer.Expression: void <init>()>();
        return;
    }

    private acteve.symbolic.integer.Expression _realeq(acteve.symbolic.integer.Expression)
    {
        acteve.symbolic.integer.FloatExpression $r0;
        acteve.symbolic.integer.Expression $r1;
        acteve.symbolic.integer.BinaryOperator $r2;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $r1 := @parameter0: acteve.symbolic.integer.Expression;
        $r2 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator REQ>;
        $r1 = virtualinvoke $r2.<acteve.symbolic.integer.BinaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>($r0, $r1);
        return $r1;
    }

    private acteve.symbolic.integer.Expression _realne(acteve.symbolic.integer.Expression)
    {
        acteve.symbolic.integer.FloatExpression $r0;
        acteve.symbolic.integer.Expression $r1;
        acteve.symbolic.integer.BinaryOperator $r2;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $r1 := @parameter0: acteve.symbolic.integer.Expression;
        $r2 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator RNE>;
        $r1 = virtualinvoke $r2.<acteve.symbolic.integer.BinaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>($r0, $r1);
        return $r1;
    }

    public acteve.symbolic.integer.Expression _cast(int)
    {
        acteve.symbolic.integer.FloatExpression $r0, $r5;
        int $i0;
        acteve.symbolic.integer.Expression $r1;
        acteve.symbolic.integer.SymbolicInteger $r2, r9;
        acteve.symbolic.integer.UnaryOperator $r3;
        java.lang.String $r4;
        float $f0;
        acteve.symbolic.integer.PathCondition $r6;
        long $l2;
        java.lang.StringBuilder $r8, r11;
        acteve.symbolic.integer.SymbolicLong r10;
        java.lang.RuntimeException r12;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $i0 := @parameter0: int;
        if $i0 != 4 goto label1;

        $r3 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.UnaryOperator F2I>;
        if $r3 != null goto label0;

        r9 = new acteve.symbolic.integer.SymbolicInteger;
        $f0 = $r0.<acteve.symbolic.integer.FloatExpression: float seed>;
        $i0 = (int) $f0;
        specialinvoke r9.<acteve.symbolic.integer.SymbolicInteger: void <init>(int,int)>(4, $i0);
        $r3 = <acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.UnaryOperator I2F>;
        $r1 = virtualinvoke $r3.<acteve.symbolic.integer.UnaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression)>(r9);
        $r5 = (acteve.symbolic.integer.FloatExpression) $r1;
        $r6 = <acteve.symbolic.integer.Expression: acteve.symbolic.integer.PathCondition pc>;
        $r1 = specialinvoke $r5.<acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.Expression _realeq(acteve.symbolic.integer.Expression)>($r0);
        virtualinvoke $r6.<acteve.symbolic.integer.PathCondition: void assumeDet(acteve.symbolic.integer.Expression)>($r1);
        return r9;

     label0:
        $r3 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.UnaryOperator F2I>;
        $r1 = virtualinvoke $r3.<acteve.symbolic.integer.UnaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression)>($r0);
        return $r1;

     label1:
        if $i0 != 5 goto label3;

        $r3 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.UnaryOperator F2L>;
        if $r3 != null goto label2;

        r10 = new acteve.symbolic.integer.SymbolicLong;
        $r2 = (acteve.symbolic.integer.SymbolicInteger) r10;
        $f0 = $r0.<acteve.symbolic.integer.FloatExpression: float seed>;
        $l2 = (long) $f0;
        specialinvoke r10.<acteve.symbolic.integer.SymbolicLong: void <init>(long)>($l2);
        $r3 = <acteve.symbolic.integer.LongExpression: acteve.symbolic.integer.UnaryOperator L2F>;
        $r1 = virtualinvoke $r3.<acteve.symbolic.integer.UnaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression)>($r2);
        $r5 = (acteve.symbolic.integer.FloatExpression) $r1;
        $r6 = <acteve.symbolic.integer.Expression: acteve.symbolic.integer.PathCondition pc>;
        $r1 = specialinvoke $r5.<acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.Expression _realeq(acteve.symbolic.integer.Expression)>($r0);
        virtualinvoke $r6.<acteve.symbolic.integer.PathCondition: void assumeDet(acteve.symbolic.integer.Expression)>($r1);
        return $r2;

     label2:
        $r3 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.UnaryOperator F2L>;
        $r1 = virtualinvoke $r3.<acteve.symbolic.integer.UnaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression)>($r0);
        return $r1;

     label3:
        if $i0 != 7 goto label4;

        $r3 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.UnaryOperator F2D>;
        $r1 = virtualinvoke $r3.<acteve.symbolic.integer.UnaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression)>($r0);
        return $r1;

     label4:
        r12 = new java.lang.RuntimeException;
        r11 = new java.lang.StringBuilder;
        specialinvoke r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("unexpected type ");
        $r8 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);
        throw r12;
    }

    public acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression)
    {
        acteve.symbolic.integer.FloatExpression $r0;
        acteve.symbolic.integer.Expression $r1;
        acteve.symbolic.integer.BinaryOperator $r2;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $r1 := @parameter0: acteve.symbolic.integer.Expression;
        $r2 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FCMPG>;
        $r1 = virtualinvoke $r2.<acteve.symbolic.integer.BinaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>($r0, $r1);
        return $r1;
    }

    public acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression)
    {
        acteve.symbolic.integer.FloatExpression $r0;
        acteve.symbolic.integer.Expression $r1;
        acteve.symbolic.integer.BinaryOperator $r2;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $r1 := @parameter0: acteve.symbolic.integer.Expression;
        $r2 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FCMPL>;
        $r1 = virtualinvoke $r2.<acteve.symbolic.integer.BinaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>($r0, $r1);
        return $r1;
    }

    public acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)
    {
        acteve.symbolic.integer.FloatExpression $r0;
        acteve.symbolic.integer.Expression $r1;
        acteve.symbolic.integer.BinaryOperator $r2;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $r1 := @parameter0: acteve.symbolic.integer.Expression;
        $r2 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FDIV>;
        $r1 = virtualinvoke $r2.<acteve.symbolic.integer.BinaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>($r0, $r1);
        return $r1;
    }

    public acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)
    {
        acteve.symbolic.integer.FloatExpression $r0;
        acteve.symbolic.integer.Expression $r1;
        acteve.symbolic.integer.BinaryOperator $r2;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $r1 := @parameter0: acteve.symbolic.integer.Expression;
        $r2 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FSUB>;
        $r1 = virtualinvoke $r2.<acteve.symbolic.integer.BinaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>($r0, $r1);
        return $r1;
    }

    public acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)
    {
        acteve.symbolic.integer.FloatExpression $r0;
        acteve.symbolic.integer.Expression $r1;
        acteve.symbolic.integer.BinaryOperator $r2;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $r1 := @parameter0: acteve.symbolic.integer.Expression;
        $r2 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FMUL>;
        $r1 = virtualinvoke $r2.<acteve.symbolic.integer.BinaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>($r0, $r1);
        return $r1;
    }

    public acteve.symbolic.integer.Expression _neg()
    {
        acteve.symbolic.integer.FloatExpression $r0;
        acteve.symbolic.integer.UnaryOperator $r1;
        acteve.symbolic.integer.Expression $r2;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $r1 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.UnaryOperator FNEG>;
        $r2 = virtualinvoke $r1.<acteve.symbolic.integer.UnaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression)>($r0);
        return $r2;
    }

    public acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)
    {
        acteve.symbolic.integer.FloatExpression $r0;
        acteve.symbolic.integer.Expression $r1;
        acteve.symbolic.integer.BinaryOperator $r2;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $r1 := @parameter0: acteve.symbolic.integer.Expression;
        $r2 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FADD>;
        $r1 = virtualinvoke $r2.<acteve.symbolic.integer.BinaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>($r0, $r1);
        return $r1;
    }

    public acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)
    {
        acteve.symbolic.integer.FloatExpression $r0;
        acteve.symbolic.integer.Expression $r1;
        acteve.symbolic.integer.BinaryOperator $r2;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $r1 := @parameter0: acteve.symbolic.integer.Expression;
        $r2 = <acteve.symbolic.integer.FloatExpression: acteve.symbolic.integer.BinaryOperator FREM>;
        $r1 = virtualinvoke $r2.<acteve.symbolic.integer.BinaryOperator: acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>($r0, $r1);
        return $r1;
    }

    public float seed()
    {
        acteve.symbolic.integer.FloatExpression $r0;
        float $f0;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $f0 = $r0.<acteve.symbolic.integer.FloatExpression: float seed>;
        return $f0;
    }

    protected final java.lang.String toYicesString(java.lang.String)
    {
        acteve.symbolic.integer.FloatExpression $r0;
        java.lang.String $r1, $r5, $r6;
        acteve.symbolic.integer.PathCondition $r3;
        java.lang.StringBuilder $r4;

        $r0 := @this: acteve.symbolic.integer.FloatExpression;
        $r1 := @parameter0: java.lang.String;
        $r6 = staticinvoke <acteve.symbolic.integer.SymbolicFloat: java.lang.String makeName()>();
        $r3 = <acteve.symbolic.integer.Expression: acteve.symbolic.integer.PathCondition pc>;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("(= ");
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r3.<acteve.symbolic.integer.PathCondition: void printConstraint(java.lang.String)>($r5);
        return $r6;
    }
}
