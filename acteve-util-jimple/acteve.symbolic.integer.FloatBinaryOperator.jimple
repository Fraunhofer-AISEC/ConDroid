public class acteve.symbolic.integer.FloatBinaryOperator extends acteve.symbolic.integer.BinaryOperator
{
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = class "acteve/symbolic/integer/FloatBinaryOperator";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label1;

        $z0 = 1;

     label0:
        <acteve.symbolic.integer.FloatBinaryOperator: boolean $assertionsDisabled> = $z0;
        return;

     label1:
        $z0 = 0;
        goto label0;
    }

    public void <init>(java.lang.String)
    {
        acteve.symbolic.integer.FloatBinaryOperator $r0;
        java.lang.String $r1;

        $r0 := @this: acteve.symbolic.integer.FloatBinaryOperator;
        $r1 := @parameter0: java.lang.String;
        specialinvoke $r0.<acteve.symbolic.integer.BinaryOperator: void <init>(java.lang.String)>($r1);
        return;
    }

    public acteve.symbolic.integer.Expression apply(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression)
    {
        acteve.symbolic.integer.FloatBinaryOperator $r0;
        acteve.symbolic.integer.Expression $r1, $r2;
        boolean $z0;
        acteve.symbolic.integer.FloatExpression $r3, $r4;
        java.lang.AssertionError $r5;
        acteve.symbolic.integer.BinaryFloatExpression $r6;

        $r0 := @this: acteve.symbolic.integer.FloatBinaryOperator;
        $r1 := @parameter0: acteve.symbolic.integer.Expression;
        $r2 := @parameter1: acteve.symbolic.integer.Expression;
        $r3 = (acteve.symbolic.integer.FloatExpression) $r1;
        $r4 = (acteve.symbolic.integer.FloatExpression) $r2;
        $z0 = $r3 instanceof acteve.symbolic.integer.Constant;
        if $z0 == 0 goto label0;

        $z0 = $r4 instanceof acteve.symbolic.integer.Constant;
        if $z0 == 0 goto label0;

        $z0 = <acteve.symbolic.integer.FloatBinaryOperator: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label0:
        $r6 = new acteve.symbolic.integer.BinaryFloatExpression;
        specialinvoke $r6.<acteve.symbolic.integer.BinaryFloatExpression: void <init>(acteve.symbolic.integer.BinaryOperator,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>($r0, $r3, $r4);
        return $r6;
    }
}
